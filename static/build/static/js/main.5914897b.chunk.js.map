{"version":3,"sources":["BlindItem.js","BlindsList.js","App.js","serviceWorker.js","index.js"],"names":["PositionSelector","position","id","Slider","defaultValue","onChange","value","axios","get","size","bg","BlindItem","data","name","online","action","doAction","Box","height","textAlign","m","Grid","templateColumns","columnGap","pl","Heading","pt","Icon","color","Text","fontSize","fontWeight","Badge","variant","mt","pr","IconButton","variantColor","aria-label","disabled","icon","FaArrowAltCircleUp","onClick","margin","FaPauseCircle","FaArrowAltCircleDown","BlindsList","blinds","SimpleGrid","columns","sm","md","lg","map","blind","key","pb","App","updateBlindInfos","state","filter","device","isEqual","updatedValues","setState","isFetching","error","then","status","console","socket","io","on","catch","e","trace","ThemeProvider","theme","CSSReset","w","as","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5914897b.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  Box,\n  Heading,\n  Text,\n  Badge,\n  IconButton,\n  Icon,\n  Slider,\n  SliderTrack,\n  SliderFilledTrack,\n  SliderThumb,\n  Grid\n} from \"@chakra-ui/core\";\n\nimport {\n  FaPauseCircle,\n  FaArrowAltCircleUp,\n  FaArrowAltCircleDown\n} from \"react-icons/fa\";\nimport axios from \"axios\";\n\nfunction PositionSelector({ position, id }) {\n  const doAction = value => {\n    axios.get(`/roller/${id}/position/${value}`);\n  };\n\n  if (!position) {\n    return \"\";\n  }\n  return (\n    <Slider defaultValue={position} onChange={doAction} size=\"md\">\n      <SliderTrack bg=\"red.100\" />\n      <SliderFilledTrack bg=\"tomato\" />\n      <SliderThumb size={6}></SliderThumb>\n    </Slider>\n  );\n}\n\nfunction BlindItem(data) {\n  const { name, id, online = false, action = \"stop\", position } = data;\n\n  const doAction = ({ id, action }) => {\n    axios.get(`/roller/${id}/${action}`);\n  };\n  return (\n    <Box height=\"200px\" textAlign=\"center\" bg=\"white\" m={5}>\n      <Grid templateColumns=\"80% 15%\" columnGap={5}>\n        <Box textAlign=\"left\" pl={3}>\n          <Heading>{name}</Heading>\n        </Box>\n        <Box pt=\"6px\">\n          <Icon\n            name={online ? \"check-circle\" : \"warning\"}\n            size=\"20px\"\n            color={online ? \"green.400\" : \"red.500\"}\n          />\n        </Box>\n      </Grid>\n      <Box textAlign=\"left\" pl={3}>\n        <Text fontSize=\"sm\" fontWeight=\"bold\">\n          Current action: <Badge variant=\"outline\">{action}</Badge>\n        </Text>\n      </Box>\n      <Box mt={5}>\n        <Grid templateColumns=\"80% 15%\" columnGap={5} pl={10} pr={10}>\n          <Box>\n            <PositionSelector id={id} position={position} />\n          </Box>\n          <Box>\n            <Badge variant=\"outline\">{position ? `${position}%` : \"...\"}</Badge>\n          </Box>\n        </Grid>\n      </Box>\n      <IconButton\n        variant=\"outline\"\n        variantColor=\"black\"\n        aria-label=\"Open\"\n        fontSize=\"20px\"\n        disabled={action === \"open\" || !online}\n        icon={FaArrowAltCircleUp}\n        onClick={() => {\n          doAction({ id, action: \"open\" });\n        }}\n        margin=\"10px\"\n      />\n      <IconButton\n        variant=\"outline\"\n        variantColor=\"black\"\n        aria-label=\"Stop\"\n        fontSize=\"20px\"\n        icon={FaPauseCircle}\n        disabled={!online}\n        onClick={() => {\n          doAction({ id, action: \"stop\" });\n        }}\n        margin=\"10px\"\n      />\n      <IconButton\n        variant=\"outline\"\n        variantColor=\"black\"\n        aria-label=\"Close\"\n        fontSize=\"20px\"\n        icon={FaArrowAltCircleDown}\n        disabled={action === \"close\" || !online}\n        onClick={() => {\n          doAction({ id, action: \"close\" });\n        }}\n        margin=\"10px\"\n      />\n    </Box>\n  );\n}\n\nexport default BlindItem;\n","import React from \"react\";\nimport { SimpleGrid, Box } from \"@chakra-ui/core\";\nimport BlindItem from \"./BlindItem\";\n\nfunction BlindsList({ blinds }) {\n  return (\n    <Box bg=\"gray.100\">\n      <SimpleGrid columns={{ sm: 1, md: 2, lg: 3 }} m=\"1em\">\n        {blinds.map(blind => (\n          <BlindItem key={blind.id} {...blind}></BlindItem>\n        ))}\n      </SimpleGrid>\n      <Box m={4} pb={4}>\n        <BlindItem\n          key=\"all\"\n          id=\"all\"\n          name=\"All\"\n          online={true}\n          m=\"10px\"\n        ></BlindItem>\n      </Box>\n    </Box>\n  );\n}\n\nexport default BlindsList;\n","import React, { Component } from \"react\";\nimport { ThemeProvider, CSSReset } from \"@chakra-ui/core\";\nimport { theme } from \"@chakra-ui/core\";\nimport { Heading, Box } from \"@chakra-ui/core\";\nimport BlindsList from \"./BlindsList\";\nimport io from \"socket.io-client\";\nimport axios from \"axios\";\nimport isEqual from \"lodash.isequal\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      isFetching: true,\n      error: false,\n      blinds: []\n    };\n  }\n\n  updateBlindInfos = data => {\n    const { blinds } = this.state;\n    const blind = blinds.filter(device => device.id === data.id)[0];\n    if (isEqual(blind, { ...blind, ...data })) {\n      // no changes\n      return;\n    }\n    const updatedValues = blinds.map(blind => {\n      if (blind.id !== data.id) {\n        return blind;\n      } else {\n        return { ...blind, ...data };\n      }\n    });\n    this.setState({ ...this.state, blinds: updatedValues });\n  };\n  componentDidMount() {\n    axios\n      .get(\"/blinds\")\n      .then(({ status, data }) => {\n        if (status !== 200) {\n          console.error(`Unable to fetch: ${status}`);\n          this.setState({ ...this.state, isFetching: false, error: true });\n          return;\n        }\n        this.setState({ ...this.state, isFetching: false, blinds: data });\n        const socket = io();\n        socket.on(\"connect\", function() {});\n        socket.on(\"online\", data => {\n          this.updateBlindInfos(data);\n        });\n        socket.on(\"position\", data => {\n          this.updateBlindInfos(data);\n        });\n        socket.on(\"action\", data => {\n          this.updateBlindInfos(data);\n        });\n        socket.on(\"disconnect\", function() {});\n      })\n      .catch(e => {\n        console.trace(e);\n        this.setState({ ...this.state, isFetching: false, error: true });\n      });\n  }\n  render() {\n    return (\n      <ThemeProvider theme={theme}>\n        <CSSReset></CSSReset>\n        <Box w=\"100%\">\n          <Heading as=\"h1\" size=\"2xl\" textAlign=\"center\">\n            Blinds\n          </Heading>\n          <BlindsList blinds={this.state.blinds} />\n        </Box>\n      </ThemeProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}